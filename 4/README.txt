Part 1 partner: Cameron Bates

Included Files:
  Part 1:
  - formatImage.py
  - imageModifier.py
  - imageModifierServer.py

  Part 2:
  - identifyNotes.py
  - notesMain.py
  - pianoNotes.html

Part 1:
- formatImage.py: contains functions to 'pack' and 'unpack' images (as
  np.ndarrays) into lists so they can be transferred via xmlrpc.
- imageModifier.py: Contains the imageModifier class which contains the 3
  methods that can be used to modify an incoming image
- imageModifierServer.py: Code for setting up the server. Creates an
  imageModifier instance and serves it forever on the specified host and port.

To Run:
In [1]: run imageModifierServer

*now run client*

- Each method from the server returns a tuple containing the original image
  as well as the modified image. Each method can handle color or grayscale
  images although the behavior may not be the same (if not, a warning is 
  printed)
- In order to view an image returned by the server, you have to use
  imageModifier.unpackImage( img_name ) to put it in the proper format for
  imshow(). The returned format is as a 1-D list because xmlrpc doesn't work
  for transferring arrays.

NOTE: When running client for grading, do not use default server host in 
imageModifierServer.py (i.e. ross-LBL.dhcp.lbl.gov). I cannot guarantee that 
my machine will be on when you decide to grade the assignments.

Part 2:
- identifyNotes.py: Contains all functions used to load the data from aif files,
  transform the sound data into the frequency domain, identify the peaks, and 
  relate the peaks to a note.
- pianoNotes.html: contains the source code from a wikipedia page dealing with
  piano notes and the associated frequencies. For whatever reason, I was unable
  to access wikipedia with urllib, so I just downloaded the source and used the
  local copy instead
- notesMain.py: Uses the functionality in identifyNotes to identify the notes
  for every sound file contained in a directory called sound_files.

To Run:
In [1]: run notesMain

Note:
 - Must be run in a directory that contains a folder called 'sound_files'
 - IMPORTANT: The tolerance of the peak detection is controlled by fcut in 
   notesMain.py. The default behavior is to consider anything above 20x the
   baseline of the normalized power spectrum (where the baseline is an area 
   where there is never a note) a peak. This is a relatively loose threshhold
   that minimizes false negatives. To switch to a more stringent threshhold
   (i.e. minimize false positives) change the multiplier to 25x or use 80%
   of the maximum value of the power spectrum.
 - the default behavior of notes main is to show the frequency spectrum from
   each file. This can be turned off by setting the pltflg in 
   identifyNotes.getFrequency() to False.
 - The note dictionary will contain only whole tones (i.e. no sharps
   or flats). This is in accordance with the sample files that were given. If
   there are half tones contained in any of the sound files, the code will ID
   the frequency okay but will print a warning of 'Note not identified' and
   return None for that particular frequency peak.
 - The power spectrum on which peaks are ID'ed is generated by abs(F*F)
 - The frequency is truncated so that only 0-5000 Hz is searched. This matches
   the range of an 88-key piano (A0 to C8). C8 is not included in the note
   dictionary.
